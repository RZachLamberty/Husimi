#ifndef NRG_SPIN_HEADER
#define NRG_SPIN_HEADER

#include"global.h"
#include"matrix_functions.h"
#include"printing_functions.h"

////////////////////////////////////////////////////////////////////////////////////////////////
void nrg_spin(double                                            spin,
         int 						        gen,
	 double                                  		j_z,
	 double 						j_x,
	 double                                                 d,
         std::vector<double>                                    target_szs,
         std::vector<int>                                       target_numbers,
	 std::vector< std::vector<double> > 		   	&eigs,
         std::vector<double>				   	&spins,
    	 std::vector< std::vector<int> >                        &inverse_subspace_map,
    	 std::vector< std::vector<int> >                        &inverse_sz_map,
	 std::vector< std::vector< Matrix > > 	                &transforms,
         std::vector< std::vector< Matrix > >                   &s_plus_block,
         std::vector< std::vector< Matrix > >                   &s_minus_block,
         std::vector< std::vector< Matrix > > 	                &s_z_block,
	 std::vector< std::vector< Matrix > > 	                &ham_block,
	 int 							max_states, 
	 bool 							ipr=true);

////////////////////////////////////////////////////////////////////////////////////////////////
void nrg_dmrg_spin_cactus(double                                spin,
		          double                		j_z,
                          double                                j_x,
			  double                                d,
			  std::vector<double> 			input_target_szs,
			  std::vector<int> 			input_target_states,
			  std::vector<int> 			block_num_states,
			  int 				        max_trunc_states, 
			  std::vector<double>                   &szs_on_block,
    	 		  std::vector<int>                      &inverse_subspace_map,
    	 		  std::vector<int>                      &inverse_sz_map,
			  std::vector< Matrix >                 &s_plus_block,
			  std::vector< Matrix >                 &s_minus_block,
			  std::vector< Matrix >                 &s_z_block,
			  std::vector< Matrix >                 &local_hams,
			  std::vector<double>                   &szs,
    	 		  std::vector<int>                      &inverse_subspace_map_out,
    	 		  std::vector<int>                      &inverse_sz_map_out,
			  std::vector<Matrix> 		        &s_p_psite, 
			  std::vector<Matrix> 		        &s_m_psite, 
			  std::vector<Matrix> 		        &s_z_psite, 
			  std::vector<Matrix>                   &ham_out,
			  std::vector<Matrix> 		        &opt_evecs, 
			  int 				        lanc_dav_it,
			  bool					ipr=true);

////////////////////////////////////////////////////////////////////////////////////////////////
void nrg_dmrg_spin_3(	  double				j_z,
			  double 				j_x,		
			  std::vector<double> 			input_target_szs,
			  std::vector<int> 			input_target_states,
			  std::vector<int> 			block_num_states,
			  int 				        max_trunc_states, 
			  std::vector< std::vector<double> >    &szs_on_block,
    	 		  std::vector< std::vector<int> >       &inverse_subspace_map,
    	 		  std::vector< std::vector<int> >       &inverse_sz_map,
			  std::vector< std::vector< Matrix > >  &s_plus_surr,
			  std::vector< std::vector< Matrix > >  &s_minus_surr,
			  std::vector< std::vector< Matrix > >  &s_z_surr,
			  std::vector< std::vector< Matrix > >  &local_hams,
			  std::vector< std::vector<double> >    &energies,
			  std::vector<double> 		        &szs,
			  std::vector<Matrix> 		        &opt_evecs, 
			  Matrix 			        &s_p_psite, 
			  Matrix 			        &s_m_psite, 
			  Matrix	 		        &s_z_psite, 
			  std::vector< std::vector< std::vector<double> > >     &evecs, 
			  std::vector< std::vector<int> >                       &map_for_target_states,	 
			  std::vector<int>                                      &inverse_map_for_target_states,	 
			  int 				        lanc_dav_it=100,
			  bool					ipr=true);
////////////////////////////////////////////////////////////////////////////////////////////////

#endif
